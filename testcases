
# Basic operations

#1. 5 > 3 ;; (* - : bool = true *)
functionType(greater_than, [int, int, T]).

#2. 5 < 3 ;; (* - : bool = false *)
functionType(less_than, [int, int, T]).

#3 5.0 < 3 ;; (* Error: 3 should be float *)
functionType(less_than, [float, int, bool]).

#4 "hello" < "hello" ;; (* - : bool = false *)
functionType(less_than, [string, string, T]).

#5 "hello" ^ "hello" ;; (* - : string = "hellohello" *)
functionType(concat_string, [X, Y, Z]).

#6 string_of_int 5.0 ;; (* Error: expected int but found float)
functionType(string_of_int, [float, _]).

#7 string_of_int 5 ;; (* String "5" *)
functionType(string_of_int, [int, T]).

#8 let x = 3;;

#9 let x = 3 in x;;

#10 let x = 3 in x + y;;

# 11 let x = 3;; let y = x;;

#12 let x = print "hello"; 3;;

#13 let x = print "hello"; 3; 5;; (* Error *)

#14  let x = 3 in x < 4.;; (* Error *)

#15 add 5 (* int -> int *)
functionType(apply, [ADD, int, T]), functionType(add, ADD).

#15 (int -> int) -> int -> int (* Should produce int *)
functionType(apply, [ [int, [int]], int, T]).

#16 (int -> float) -> int -> float
functionType(apply, [ [int, [float]], int, T]).

#18 print "hello"
functionType(apply, [PRINT, string, T]), functionType(print, PRINT).

#16 5 |> add (* int -> int *)
functionType(reverse_apply, [int, ADD, T]), functionType(add, ADD).

#17 5.0 |> add 4.0 (* int *)
functionType(reverse_apply, [float, ADD2, T]), functionType(apply, [ADD, float, ADD2]), functionType(add, ADD).

#17 for (i = 0 to 10 do {}; done;
typeStatement(for(i, int, int), [], unit).



